import groovy.json.JsonSlurper

// function to load JSON configuration
def loadConfig(filePath) {
    def jsonSlurper = new JsonSlurper()
    def configFile = new File(filePath)
    def config = jsonSlurper.parse(configFile)

    return config
}

// function to extract path to directory from path to file
def getPath(path) {
    def parts = path.split('/')
    if (parts.size() > 1) {
        return path.substring(0, path.lastIndexOf('/'))
    } else {
        return path
    }
}

// load configuration file
def config = loadConfig('config.json')


// get last process in the pipeline that manipulates BAM files
def last_bam_process = ""
if (config.run_processes.alignment) {
    last_bam_process = "alignment"
}
if (config.run_processes.BAM_sorting) {
    last_bam_process = "sorting"
}
if (config.run_processes.remove_duplicates) {
    last_bam_process = "duplicates"
}
if (config.run_processes.BAM_filtering || config.run_processes.all) {
    last_bam_process = "filtering"
}


// set parameters for nextflow script
params {

    // set pipeline steps to run
    help = false
    run_genome_indexing = config.run_processes.genome_indexing
    run_alignment = config.run_processes.alignment
    run_BAM_sorting = config.run_processes.BAM_sorting
    run_remove_duplicates = config.run_processes.remove_duplicates
    run_BAM_filtering = config.run_processes.BAM_filtering
    run_BAM_indexing = config.run_processes.BAM_indexing
    run_BAM_stats = config.run_processes.BAM_stats
    run_gene_counts = config.run_processes.gene_counts
    run_summarize_results = config.run_processes.summarize_results
    run_all = config.run_processes.all

    // set parameters for function calls
    max_RAM_indexing = config.processes.genome_indexing.max_RAM
    remove_seq_duplicates = config.processes.gene_counts.remove_seq_duplicates
    quality_thres = config.processes.BAM_filtering.quality_thres
    count_algo = config.processes.gene_counts.algo
    strandedness = config.processes.gene_counts.strandedness

    // set data paths
    index_dir = config.data_paths.index_dir
    fasta_file = config.data_paths.fasta_file
    annotation_file = config.data_paths.annotation_file
    fastq_files = config.data_paths.fastq_files
    bam_files = config.data_paths.bam_files
    bam_dir = config.data_paths.bam_dir
    gene_counts_dir = config.data_paths.gene_counts_dir
    report_dir = config.data_paths.report_dir

    // set number of threads to use for each step
    genome_indexing_nt = config.processes.genome_indexing.num_threads
    alignment_nt = config.processes.alignment.num_threads
    BAM_sorting_nt = config.processes.BAM_sorting.num_threads
    BAM_filtering_nt = config.processes.BAM_filtering.num_threads
    BAM_indexing_nt = config.processes.BAM_indexing.num_threads
    BAM_stats_nt = config.processes.BAM_stats.num_threads
    gene_counts_nt = config.processes.gene_counts.num_threads

    // set BAM files to save
    save_all_BAM = config.save_all_BAM
    last_BAM_output = last_bam_process
}


// set parameters for execution on cluster with singularity
process {

    // set executor
    if (config.run_locally) {
        executor = 'local'
    } else {
        executor = 'slurm'
        beforeScript = "module load singularity"  // load singularity module
    }

    // set error strategy
    //if (!config.run_locally) {
     //   errorStrategy = 'retry'
       // maxRetries = 1
    //}

    // extract directories to bind in containers
    def index_dir = params.index_dir.toString()
    def fasta_dir = getPath(params.fasta_file.toString())
    def annotation_dir = getPath(params.annotation_file.toString())
    def fastq_dirs = params.fastq_files.collect{ path -> return getPath(path.toString()) }.unique()
    def bam_dirs = params.bam_files.collect{ path -> return getPath(path.toString()) }.unique()
    def bam_dir = params.bam_dir.toString()
    def gene_counts_dir = params.gene_counts_dir.toString()
    def report_dir = params.report_dir.toString()

    // create container options string
    def container_options = "--bind $PWD"
    if (!index_dir.isEmpty()) {
        container_options = container_options + "," + index_dir
    }
    if (!fasta_dir.isEmpty()) {
        container_options = container_options + "," + fasta_dir
    }
    if (!annotation_dir.isEmpty()) {
        container_options = container_options + "," + annotation_dir
    }
    if (!fastq_dirs.join(",").isEmpty()) {
        container_options = container_options + "," + fastq_dirs.join(",")
    }
    if (!bam_dirs.join(",").isEmpty()) {
        container_options = container_options + "," + bam_dirs.join(",")
    }
    if (!bam_dir.isEmpty()) {
        container_options = container_options + "," + bam_dir
    }
    if (!gene_counts_dir.isEmpty()) {
        container_options = container_options + "," + gene_counts_dir
    }
    if (!report_dir.isEmpty()) {
        container_options = container_options + "," + report_dir
    }
    container_options = container_options + " --writable-tmpfs"

    // bind extracted directories to containers
    containerOptions = container_options

    // set process specific options
    if (config.run_locally) {
        withName: runGenomeIndexing {
            container = config.processes.genome_indexing.container_path  // container
        }
        withName: runAlignment {
            container = config.processes.alignment.container_path
        }
        withName: runBAMSorting {
            container = config.processes.BAM_sorting.container_path
        }
        withName: runRemoveDuplicates {
            container = config.processes.remove_duplicates.container_path
        }
        withName: runBAMFiltering {
            container = config.processes.BAM_filtering.container_path
        }
        withName: runBAMIndexing {
            container = config.processes.BAM_indexing.container_path
        }
        withName: runBAMStats {
            container = config.processes.BAM_stats.container_path
        }
        withName: runFeatureCounts {
            container = config.processes.gene_counts.container_path
        }
        withName: runHTSeq {
            container = config.processes.gene_counts.container_path
        }
        withName: runSumResults {
            container = config.processes.summarize_results.container_path
        }
    } else {
        withName: runGenomeIndexing {
            queue = config.processes.genome_indexing.queue  // cluster partition
            cpus = config.processes.genome_indexing.num_threads  // logical cpus
            time = config.processes.genome_indexing.time  // maximum time
            memory = config.processes.genome_indexing.memory  // RAM
            container = config.processes.genome_indexing.container_path  // container
        }
        withName: runAlignment {
            queue = config.processes.alignment.queue
            cpus = config.processes.alignment.num_threads
            time = config.processes.alignment.time
            memory = config.processes.alignment.memory
            container = config.processes.alignment.container_path
        }
        withName: runBAMSorting {
            queue = config.processes.BAM_sorting.queue
            cpus = config.processes.BAM_sorting.num_threads
            time = config.processes.BAM_sorting.time
            memory = config.processes.BAM_sorting.memory
            container = config.processes.BAM_sorting.container_path
        }
        withName: runRemoveDuplicates {
            queue = config.processes.remove_duplicates.queue
            cpus = config.processes.remove_duplicates.num_threads
            time = config.processes.remove_duplicates.time
            memory = config.processes.remove_duplicates.memory
            container = config.processes.remove_duplicates.container_path
        }
        withName: runBAMFiltering {
            queue = config.processes.BAM_filtering.queue
            cpus = config.processes.BAM_filtering.num_threads
            time = config.processes.BAM_filtering.time
            memory = config.processes.BAM_filtering.memory
            container = config.processes.BAM_filtering.container_path
        }
        withName: runBAMIndexing {
            queue = config.processes.BAM_indexing.queue
            cpus = config.processes.BAM_indexing.num_threads
            time = config.processes.BAM_indexing.time
            memory = config.processes.BAM_indexing.memory
            container = config.processes.BAM_indexing.container_path
        }
        withName: runBAMStats {
            queue = config.processes.BAM_stats.queue
            cpus = config.processes.BAM_stats.num_threads
            time = config.processes.BAM_stats.time
            memory = config.processes.BAM_stats.memory
            container = config.processes.BAM_stats.container_path
        }
        withName: runFeatureCounts {
            queue = config.processes.gene_counts.queue
            cpus = config.processes.gene_counts.num_threads
            time = config.processes.gene_counts.time
            memory = config.processes.gene_counts.memory
            container = config.processes.gene_counts.container_path
        }
        withName: runHTSeq {
            queue = config.processes.gene_counts.queue
            cpus = config.processes.gene_counts.num_threads
            time = config.processes.gene_counts.time
            memory = config.processes.gene_counts.memory
            container = config.processes.gene_counts.container_path
        }
        withName: runSumResults {
            queue = config.processes.summarize_results.queue
            cpus = config.processes.summarize_results.num_threads
            time = config.processes.summarize_results.time
            memory = config.processes.summarize_results.memory
            container = config.processes.summarize_results.container_path
        }
    }
}

singularity.enabled = true
