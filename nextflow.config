import groovy.json.JsonSlurper

// function to load JSON configuration
def loadConfig(filePath) {
    def jsonSlurper = new JsonSlurper()
    def configFile = new File(filePath)
    def config = jsonSlurper.parse(configFile)

    return config
}

// load configuration file
def config = loadConfig('config.json')


// set parameters for nextflow script
params {

    // set pipeline steps to run
    help = false
    run_genome_indexing = config.run_processes.genome_indexing
    run_alignment = config.run_processes.alignment
    run_BAM_sorting = config.run_processes.BAM_sorting
    run_mark_duplicates = config.run_processes.mark_duplicates
    run_BAM_filtering = config.run_processes.BAM_filtering
    run_BAM_indexing = config.run_processes.BAM_indexing
    run_BAM_stats = config.run_processes.BAM_stats
    run_gene_counts = config.run_processes.gene_counts
    run_sum_results = config.run_processes.sum_results
    run_all = config.run_processes.all

    // set parameters for function calls
    max_RAM_indexing = config.processes.genome_indexing.max_RAM
    count_algo = config.processes.gene_counts.algo
    quality_thres = config.processes.BAM_filtering.quality_thres

    // set data paths
    index_dir = config.data_paths.index_dir
    fasta_file = config.data_paths.fasta_file
    annotation_file = config.data_paths.annotation_file
    fastq_files = config.data_paths.fastq_files
    bam_files = config.data_paths.bam_files
    bam_dir = config.data_paths.bam_dir
    gene_counts_dir = config.data_paths.gene_counts_dir
    data_dirs = config.data_paths.data_dirs
    report_dir = config.data_paths.report_dir

    // set number of threads to use for each step
    genome_indexing_nt = config.processes.genome_indexing.num_threads
    alignment_nt = config.processes.alignment.num_threads
    BAM_sorting_nt = config.processes.BAM_sorting.num_threads
    BAM_filtering_nt = config.processes.BAM_filtering.num_threads
    BAM_indexing_nt = config.processes.BAM_indexing.num_threads
    BAM_stats_nt = config.processes.BAM_stats.num_threads
    gene_counts_nt = config.processes.gene_counts.num_threads
}


// set parameters for execution on cluster with singularity
process {

    // set executor
    if (config.run_locally) {
	executor = 'local'
    } else {
	executor = 'slurm'
	beforeScript = "module load singularity"  // load singularity module
    }

    // set error strategy
    if (!config.run_locally) {
	errorStrategy = 'retry'
	maxRetries = 2
    }

    // bind data directories to containers
    containerOptions = "--bind config.additional_bindings --writable-tmpfs"
    
    // set process specific options
    if (config.run_locally) {
	withName: runGenomeIndexing {
	    container = config.processes.genome_indexing.container_path  // container
	}
	withName: runAlignment {
	    container = config.processes.alignment.container_path
	}
	withName: runBAMSorting {
	    container = config.processes.BAM_sorting.container_path
	}
	withName: runMarkDuplicates {
	    container = config.processes.mark_duplicates.container_path
	}
	withName: runBAMFiltering {
	    container = config.processes.BAM_filtering.container_path
	}
	withName: runBAMIndexing {
	    container = config.processes.BAM_indexing.container_path
	}
	withName: runBAMStats {
	    container = config.processes.BAM_stats.container_path
	}
	withName: runFeatureCounts {
	    container = config.processes.gene_counts.container_path
	}
	withName: runHTSeq {
	    container = config.processes.gene_counts.container_path
	}
	withName: runSumResults {
	    container = config.processes.sum_results.container_path
	}
    } else {
	withName: runGenomeIndexing {
	    queue = config.processes.genome_indexing.queue  // cluster partition
	    cpus = config.processes.genome_indexing.num_threads  // logical cpus
	    time = config.processes.genome_indexing.time  // maximum time
	    memory = config.processes.genome_indexing.memory  // RAM
	    container = config.processes.genome_indexing.container_path  // container
	}
	withName: runAlignment {
	    queue = config.processes.alignment.queue
	    cpus = config.processes.alignment.num_threads
	    time = config.processes.alignment.time
	    memory = config.processes.alignment.memory
	    container = config.processes.alignment.container_path
	}
	withName: runBAMSorting {
	    queue = config.processes.BAM_sorting.queue
	    cpus = config.processes.BAM_sorting.num_threads
	    time = config.processes.BAM_sorting.time
	    memory = config.processes.BAM_sorting.memory
	    container = config.processes.BAM_sorting.container_path
	}
	withName: runMarkDuplicates {
	    queue = config.processes.mark_duplicates.queue
	    cpus = config.processes.mark_duplicates.num_threads
	    time = config.processes.mark_duplicates.time
	    memory = config.processes.mark_duplicates.memory
	    container = config.processes.mark_duplicates.container_path
	}
	withName: runBAMFiltering {
	    queue = config.processes.BAM_filtering.queue
	    cpus = config.processes.BAM_filtering.num_threads
	    time = config.processes.BAM_filtering.time
	    memory = config.processes.BAM_filtering.memory
	    container = config.processes.BAM_filtering.container_path
	}
	withName: runBAMIndexing {
	    queue = config.processes.BAM_indexing.queue
	    cpus = config.processes.BAM_indexing.num_threads
	    time = config.processes.BAM_indexing.time
	    memory = config.processes.BAM_indexing.memory
	    container = config.processes.BAM_indexing.container_path
	}
	withName: runBAMStats {
	    queue = config.processes.BAM_stats.queue
	    cpus = config.processes.BAM_stats.num_threads
	    time = config.processes.BAM_stats.time
	    memory = config.processes.BAM_stats.memory
	    container = config.processes.BAM_stats.container_path
	}
	withName: runFeatureCounts {
	    queue = config.processes.gene_counts.queue
	    cpus = config.processes.gene_counts.num_threads
	    time = config.processes.gene_counts.time
	    memory = config.processes.gene_counts.memory
	    container = config.processes.gene_counts.container_path
	}
	withName: runHTSeq {
	    queue = config.processes.gene_counts.queue
	    cpus = config.processes.gene_counts.num_threads
	    time = config.processes.gene_counts.time
	    memory = config.processes.gene_counts.memory
	    container = config.processes.gene_counts.container_path
	}
	withName: runSumResults {
	    queue = config.processes.sum_results.queue
	    cpus = config.processes.sum_results.num_threads
	    time = config.processes.sum_results.time
	    memory = config.processes.sum_results.memory
	    container = config.processes.sum_results.container_path
	}
    }
}

singularity.enabled = true
