import groovy.json.JsonSlurper
import java.io.File


// function to load JSON configuration
def loadConfig(filePath) {
    def jsonSlurper = new JsonSlurper()
    def configFile = new File(filePath)
    def config = jsonSlurper.parse(configFile)

    return config
}

// function to extract path to directory from path to file
def getPath(path) {
    def parts = path.split('/')
    if (parts.size() > 1) {
        return path.substring(0, path.lastIndexOf('/'))
    } else {
        return path
    }
}

// load configuration file
def config = loadConfig('config.json')


// get first and last process in the pipeline that manipulates BAM files
//
// (needed for BAM names and for saving output BAMs)
def first_bam_process = ""
def last_bam_process = ""
if (config.run_processes.alignment) {
    first_bam_process = "alignment"
    last_bam_process = "alignment"
}
if (config.run_processes.BAM_sorting) {
    if (!first_bam_process) {
        first_bam_process = "sorting"
    }
    last_bam_process = "sorting"
}
if (config.run_processes.remove_duplicates) {
    if (!first_bam_process) {
        first_bam_process = "duplicates"
    }
    last_bam_process = "duplicates"
}
if (config.run_processes.BAM_filtering || config.run_processes.all) {
    if (!first_bam_process) {
        first_bam_process = "filtering"
    }
    last_bam_process = "filtering"
}


// set work directory
def work_dir = "./work"
if (config.nf_work_dir) {
    work_dir = config.nf_work_dir
}
workDir = work_dir


// get input files, directories and conditions
def input_conditions = []  // list of input conditions
def input_files = []  // list of input file names
def input_dirs = []  // paths to input files directories
def inputs_file = new File(config.data_paths.input_list)

if (config.run_processes.fastq_trimming || config.run_processes.alignment) {

    // check that file exists
    if (!inputs_file.exists()) {
        println "ERROR: data_path variable 'input_list' does not exist or was not provided"
	    System.exit(1)
    }

    def inputs = inputs_file.readLines()

    inputs.each { line ->

        def parts = line.split(',')

        def filename1 = parts[0]
        def filename2 = parts[1]
        def condition = parts[2]

        input_conditions << condition
        
        input_files << ["${filename1}", "${filename2}"]

        def dir_path1 = filename1.substring(0, filename1.lastIndexOf('/'))
        def dir_path2 = filename2.substring(0, filename2.lastIndexOf('/'))

        input_dirs << dir_path1
        input_dirs << dir_path2
    }

} else if (config.run_processes.BAM_sorting || config.run_processes.remove_duplicates || config.run_processes.BAM_filtering || config.run_processes.BAM_stats || config.run_processes.BAM_indexing || config.run_processes.gene_counts || config.run_processes.splicing_analysis) {

    // check that file exists
    if (!inputs_file.exists()) {
        println "ERROR: data_path variable 'input_list' does not exist or was not provided"
	    System.exit(1)
    }

    def inputs = inputs_file.readLines()

    inputs.each { line ->
        def parts = line.split(',')
        
        def filename = parts[0]
        def condition = parts[1]
        
        input_conditions << condition
        
        input_files << "${filename}"

        def dir_path = filename.substring(0, filename.lastIndexOf('/'))

        input_dirs << dir_path
    }
}

input_dirs = input_dirs.unique()


// set parameters for nextflow script
params {

    // set pipeline steps to run
    help = false
    run_genome_indexing = config.run_processes.genome_indexing
    run_trimming = config.run_processes.fastq_trimming
    run_alignment = config.run_processes.alignment
    run_BAM_sorting = config.run_processes.BAM_sorting
    run_remove_duplicates = config.run_processes.remove_duplicates
    run_BAM_filtering = config.run_processes.BAM_filtering
    run_BAM_indexing = config.run_processes.BAM_indexing
    run_BAM_stats = config.run_processes.BAM_stats
    run_gene_counts = config.run_processes.gene_counts
    run_splicing = config.run_processes.splicing_analysis
    run_summarize_results = config.run_processes.summarize_results

    // set parameters for function calls
    max_RAM_indexing = config.processes.genome_indexing.max_RAM
    fq_quality_thres = config.processes.fastq_trimming.quality_thres
    min_read_len = config.processes.fastq_trimming.min_length
    remove_seq_duplicates = config.processes.remove_duplicates.remove_seq_duplicates
    BAM_quality_thres = config.processes.BAM_filtering.quality_thres
    count_algo = config.processes.gene_counts.algo
    gc_strandedness = config.processes.gene_counts.strandedness
    spl_condition1 = config.processes.splicing_analysis.treatment
    spl_condition2 = config.processes.splicing_analysis.control
    spl_strandedness = config.processes.splicing_analysis.strandedness
    spl_read_len = config.processes.splicing_analysis.read_length
    use_paired_stats = config.processes.splicing_analysis.use_paired_stats
    spl_cutoff_diff = config.processes.splicing_analysis.cutoff_diff
    detect_novel_splice = config.processes.splicing_analysis.detect_novel_splice
    spl_min_intron_len = config.processes.splicing_analysis.min_intron_len
    spl_max_exon_len = config.processes.splicing_analysis.max_exon_len

    // set data paths
    index_dir = config.data_paths.index_dir
    fasta_file = config.data_paths.fasta_file
    annotation_file = config.data_paths.annotation_file
    fastq_files = input_files
    trimmed_fastq_dir = config.data_paths.trimmed_fastq_dir
    bam_files = input_files
    out_bam_dir = config.data_paths.out_bam_dir
    gene_counts_dir = config.data_paths.gene_counts_dir
    splicing_dir = config.data_paths.splicing_dir
    report_dir = config.data_paths.report_dir

    // set list of input conditions
    conditions = input_conditions

    // set number of threads to use for each step
    genome_indexing_nt = config.processes.genome_indexing.num_threads
    alignment_nt = config.processes.alignment.num_threads
    BAM_sorting_nt = config.processes.BAM_sorting.num_threads
    BAM_filtering_nt = config.processes.BAM_filtering.num_threads
    BAM_indexing_nt = config.processes.BAM_indexing.num_threads
    BAM_stats_nt = config.processes.BAM_stats.num_threads
    gene_counts_nt = config.processes.gene_counts.num_threads
    splicing_nt = config.processes.splicing_analysis.num_threads
    trimming_multithreaded = config.processes.fastq_trimming.multithreaded

    // set BAM files to save
    save_all_BAM = config.save_all_BAM
    first_BAM_output = first_bam_process
    last_BAM_output = last_bam_process
}


// set parameters for execution on cluster with singularity
process {

    // set executor
    if (config.run_locally) {
        executor = 'local'
    } else {
        executor = 'slurm'
        beforeScript = "module load singularity"  // load singularity module
    }

    // set error strategy
    //if (!config.run_locally) {
      //  errorStrategy = 'retry'
        //maxRetries = 1
    //}

    // extract directories to bind in containers
    def index_dir = params.index_dir.toString()
    def fasta_dir = getPath(params.fasta_file.toString())
    def annotation_dir = getPath(params.annotation_file.toString())
    def trimmed_fastq_dir = params.trimmed_fastq_dir.toString()
    def out_bam_dir = params.out_bam_dir.toString()
    def gene_counts_dir = params.gene_counts_dir.toString()
    def splicing_dir = params.splicing_dir.toString()
    def report_dir = params.report_dir.toString()

    // define number of cpus for trim galore!
    def trimming_cpus = 1
    if (config.processes.fastq_trimming.multithreaded) {
        trimming_cpus = 20
    }

    // create container options string
    def container_options = "--bind $PWD"
    if (!input_dirs.join(",").isEmpty()) {
        container_options = container_options + "," + input_dirs.join(",")
    }
    if (!index_dir.isEmpty()) {
        container_options = container_options + "," + index_dir
    }
    if (!fasta_dir.isEmpty()) {
        container_options = container_options + "," + fasta_dir
    }
    if (!annotation_dir.isEmpty()) {
        container_options = container_options + "," + annotation_dir
    }
    if (!trimmed_fastq_dir.isEmpty()) {
        container_options = container_options + "," + trimmed_fastq_dir
    }
    if (!out_bam_dir.isEmpty()) {
        container_options = container_options + "," + out_bam_dir
    }
    if (!gene_counts_dir.isEmpty()) {
        container_options = container_options + "," + gene_counts_dir
    }
    if (!splicing_dir.isEmpty()) {
        container_options = container_options + "," + splicing_dir
    }
    if (!report_dir.isEmpty()) {
        container_options = container_options + "," + report_dir
    }
    container_options = container_options + " --writable-tmpfs"

    // bind extracted directories to containers
    containerOptions = container_options

    // get container images directory
    def container_dir = config.container_dir.toString()

    // set process specific options
    if (config.run_locally) {
        withName: runGenomeIndexing {
            container = container_dir + "/STAR-v2.7.11b.sif"  // container
        }
        withName: runTrimming {
            container = container_dir + "/trim_galore-v0.6.7.sif" 
        }
        withName: runAlignment {
            container = container_dir + "/STAR-v2.7.11b.sif"
        }
        withName: runBAMSorting {
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runRemoveDuplicates {
            container = container_dir + "/picard-v3.1.1.sif"
        }
        withName: runBAMFiltering {
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runBAMIndexing {
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runBAMStats {
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runFeatureCounts {
            container = container_dir + "/featureCounts-v2.0.6.sif" 
        }
        withName: runHTSeq {
            container = container_dir + "/HTSeq-v2.0.2.sif"
        }
        withName: runSplicing {
            container = container_dir + "/rMATS-v4.3.0.sif"
        }
        withName: runSumResults {
            container = container_dir + "/multiQC-v1.18.sif"
        }
    } else {
        withName: runGenomeIndexing {
            queue = config.processes.genome_indexing.queue  // cluster partition
            cpus = config.processes.genome_indexing.num_threads  // logical cpus
            time = config.processes.genome_indexing.time  // maximum time
            memory = config.processes.genome_indexing.memory  // RAM
            container = container_dir + "/STAR-v2.7.11b.sif"
        }
        withName: runTrimming {
            queue = config.processes.fastq_trimming.queue
            cpus = trimming_cpus
            time = config.processes.fastq_trimming.time
            memory = config.processes.fastq_trimming.memory
            container = container_dir + "/trim_galore-v0.6.7.sif" 
        }
        withName: runAlignment {
            queue = config.processes.alignment.queue
            cpus = config.processes.alignment.num_threads
            time = config.processes.alignment.time
            memory = config.processes.alignment.memory
            container = container_dir + "/STAR-v2.7.11b.sif"
        }
        withName: runBAMSorting {
            queue = config.processes.BAM_sorting.queue
            cpus = config.processes.BAM_sorting.num_threads
            time = config.processes.BAM_sorting.time
            memory = config.processes.BAM_sorting.memory
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runRemoveDuplicates {
            queue = config.processes.remove_duplicates.queue
            cpus = 1
            time = config.processes.remove_duplicates.time
            memory = config.processes.remove_duplicates.memory
            container = container_dir + "/picard-v3.1.1.sif"
        }
        withName: runBAMFiltering {
            queue = config.processes.BAM_filtering.queue
            cpus = config.processes.BAM_filtering.num_threads
            time = config.processes.BAM_filtering.time
            memory = config.processes.BAM_filtering.memory
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runBAMIndexing {
            queue = config.processes.BAM_indexing.queue
            cpus = config.processes.BAM_indexing.num_threads
            time = config.processes.BAM_indexing.time
            memory = config.processes.BAM_indexing.memory
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runBAMStats {
            queue = config.processes.BAM_stats.queue
            cpus = config.processes.BAM_stats.num_threads
            time = config.processes.BAM_stats.time
            memory = config.processes.BAM_stats.memory
            container = container_dir + "/SAMtools-v1.3.1.sif"
        }
        withName: runFeatureCounts {
            queue = config.processes.gene_counts.queue
            cpus = config.processes.gene_counts.num_threads
            time = config.processes.gene_counts.time
            memory = config.processes.gene_counts.memory
            container = container_dir + "/featureCounts-v2.0.6.sif" 
        }
        withName: runHTSeq {
            queue = config.processes.gene_counts.queue
            cpus = config.processes.gene_counts.num_threads
            time = config.processes.gene_counts.time
            memory = config.processes.gene_counts.memory
            container = container_dir + "/HTSeq-v2.0.2.sif"
        }
        withName: runSplicing {
            queue = config.processes.splicing_analysis.queue
            cpus = config.processes.splicing_analysis.num_threads
            time = config.processes.splicing_analysis.time
            memory = config.processes.splicing_analysis.memory
            container = container_dir + "/rMATS-v4.3.0.sif"
        }
        withName: runSumResults {
            queue = config.processes.summarize_results.queue
            cpus = 1
            time = config.processes.summarize_results.time
            memory = config.processes.summarize_results.memory
            container = container_dir + "/multiQC-v1.18.sif"
        }
    }
}

singularity.enabled = true
